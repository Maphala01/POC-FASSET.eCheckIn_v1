
@model FASSET.eCheckIn_v1.Models.RegistrationModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var departmentsList = ViewBag.Departments as List<FASSET.eCheckIn_v1.Models.Department>;
    var employeesList = ViewBag.Employees as List<FASSET.eCheckIn_v1.Models.Employee>;
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>FASSET&reg; - EcheckIn Form</title>
    <link href="~/Content/StyleSheet.css" rel="stylesheet" />
    <link href="~/Content/select2.min.css" rel="stylesheet" />
    <link href="~/Content/toastr.min.css" rel="stylesheet" />
</head>
<body>
    <div class="container">
        <div class="content">
            <img class="cld-responsive" alt="header-image" src="~/Content/FASSET_HD.jpg" />
            <h1 class="form-title">FASSET&reg eCheck-In</h1>
            <div style="width:100%;
            text-align: center;
          border-radius: 20px; solid black;
            max-width:850px;
            font-size:20px;
            font-weight:bold;
            margin:auto;
            background-color: none;">
                <div id="digit_clock_time" style=></div>
                <div id="digit_clock_date" style=></div>
            </div>
            @*<h2 class="form-title">@DateTime.Now.ToString("yyyy-MM-dd hh:mm tt")</h2>*@

            @if (ViewBag.Message != null)
            {
                <div class="alert alert-success">@ViewBag.Message</div>
            }
            <form class="Form" action="@Url.Action("SubmitRegistration", "Registration")" method="post" onsubmit="processOtp()">
                @*<h5 style="text-align:center">
                ENTER TOTP
            </h5>
            <div class="otp-container">
                @for (int i = 0; i < 5; i++)
                {
                    <input required class="otp-input" maxlength="1" name="otp[]" type="text" inputmode="numeric" pattern="[0-9]*" oninput="moveToNext(this, event, @i == 4)" onkeydown="handleBackspace(this, event)">
                }
            </div>*@

                <div class="input-animated">
                    <input placeholder="DEPARTMENT" required="" list="departments" name="Department" id="department" type="text">
                    <label class="label-department" for="department"><span class="content-department">DEPARTMENT</span></label>
                    <datalist id="departments">
                        <option value="">Select a Department</option>
                        @if (departmentsList != null)
                        {
                            var departmentList = departmentsList.Take(5);
                            foreach (var department in departmentList)
                            {
                                <option value="@department.DepartmentName">@department.DepartmentName</option>
                            }
                        }
                    </datalist>
                </div>

                <div class="input-animated">
                    <input placeholder="EMPLOYEE" required="" list="employees" name="Employee" id="employee" type="text">
                    <label class="label-employee" for="employee"><span class="content-employee">EMPLOYEE</span></label>
                    <datalist id="employees">
                        <option value="">Select an Employee</option>
                        @if (employeesList != null)
                        {
                            var employeeList = employeesList.Take(5);
                            foreach (var employee in employeeList)
                            {
                                <option value="@employee.EmployeeName">@employee.EmployeeName</option>
                            }
                        }
                    </datalist>
                </div>

                <input type="hidden" name="GeoLocation" id="geoLocationDisplay">
                <input type="hidden" name="Timestamp" id="timestampDisplay">

                <button type="button" onclick="processOtp()" id="submit-button">Submit</button>

                @Html.Hidden("qrCodeImgUrl", TempData["QRCodeImageUrl"])
                @Html.Hidden("QRCodeTotp", TempData["TOTP"])
            </form>
        </div>
    </div>
    <script src="~/Content/jquery-3.6.0.min.js"></script>
    <script src="~/Content/select2.min.js"></script>
    <script src="~/Content/toastr.min.js"></script>

    <script>
        $(document).ready(function () {
            $('#department').on('input', function () {
                var inputVal = $(this).val();
                if (inputVal.length > 0) {
                    $.ajax({
                        url: '@Url.Action("GetDepartments", "Registration")',
                        type: 'GET',
                        data: { term: inputVal },
                        success: function (data) {
                            var departmentList = $('#departments');
                            departmentList.empty();
                            departmentList.append('<option value="">Select a Department</option>');
                            $.each(data, function (index, department) {
                                departmentList.append('<option value="' + department.DepartmentName + '">' + department.DepartmentName + '</option>');
                            });
                        }
                    });
                }
            });

            $('#employee').on('input', function () {
                var inputVal = $(this).val();
                if (inputVal.length > 0) {
                    $.ajax({
                        url: '@Url.Action("GetEmployees", "Registration")',
                        type: 'GET',
                        data: { term: inputVal },
                        success: function (data) {
                            var employeeList = $('#employees');
                            employeeList.empty();
                            employeeList.append('<option value="">Select an Employee</option>');
                            $.each(data, function (index, employee) {
                                employeeList.append('<option value="' + employee.EmployeeName + '">' + employee.EmployeeName + '</option>');
                            });
                        }
                    });
                }
            });

            $('#department').on('change', function () {
                $('#employee').focus();
            });

            $('#employee').on('change', function () {
                $('#submit-button').focus();
            });

            $('.otp-input').on('input', function () {
                this.value = this.value.replace(/[^0-9]/g, '');
            });
        });

        function handleBackspace(currentInput, event) {
            if (event.key === 'Backspace' && currentInput.value.length === 0) {
                let prevInput = currentInput.previousElementSibling;
                while (prevInput && prevInput.tagName !== 'INPUT') {
                    prevInput = prevInput.previousElementSibling;
                }
                if (prevInput && prevInput.classList.contains('otp-input')) {
                    prevInput.focus();
                    prevInput.value = ''; // Optionally clear the previous input
                }
            }
        }

        function moveToNext(currentInput, event, isLast) {
            if (currentInput.value.length >= 1) {
                if (isLast) {
                    document.getElementById('department').focus();
                } else {
                    let nextInput = currentInput.nextElementSibling;
                    while (nextInput && nextInput.tagName !== 'INPUT') {
                        nextInput = nextInput.nextElementSibling;
                    }
                    if (nextInput && nextInput.classList.contains('otp-input')) {
                        nextInput.focus();
                    }
                }
            }
        }

        function processOtp() {
            var otp = "";
            document.querySelectorAll('.otp-input').forEach(input => {
                otp += input.value;
            });
            var hiddenOtp = document.createElement('input');
            hiddenOtp.type = 'hidden';
            hiddenOtp.name = 'userTotp';
            hiddenOtp.value = otp;
            document.querySelector('.Form').appendChild(hiddenOtp);

            var timestamp = new Date().toISOString();
            document.getElementById('timestampDisplay').value = timestamp;

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var latitude = position.coords.latitude;
                    var longitude = position.coords.longitude;
                    var geoLocation = latitude + ',' + longitude;
                    document.getElementById('geoLocationDisplay').value = geoLocation;
                    document.querySelector('.Form').submit();
                }, function (error) {
                    console.error('Error getting geolocation: ' + error.message);
                    document.getElementById('geoLocationDisplay').value = "0,0";
                    document.querySelector('.Form').submit();
                });
            } else {
                console.error('Geolocation is not supported by this browser.');
                document.getElementById('geoLocationDisplay').value = "0,0";
                document.querySelector('.Form').submit();
            }
        }

        function currentTime() {
            var date = new Date(); /* creating object of Date class */
            var hour = date.getHours();
            var min = date.getMinutes();
            var sec = date.getSeconds();
            var midday;
            midday = (hour >= 12) ? "PM" : "AM"; /* assigning AM/PM */
            //console.log(hour+":"+min+":"+sec+" "+midday);
            hour = (hour == 0) ? 12 : ((hour > 12) ? (hour - 12) : hour); /* assigning hour in 12-hour format */

            hour = (hour < 10) ? "0" + hour : hour;
            min = (min < 10) ? "0" + min : min;
            sec = (sec < 10) ? "0" + sec : sec;

            var time = hour + " : " + min + " : " + sec + " " + midday;
            console.log(time);

            document.getElementById("digit_clock_time").innerText = time;

            var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

            var curWeekDay = days[date.getDay()];
            var curDate = date.getDate();
            var curMonth = months[date.getMonth()];
            var curYear = date.getFullYear();
            var date = curWeekDay + ", " + curDate + " " + curMonth + " " + curYear;
            document.getElementById("digit_clock_date").innerHTML = date;

            var t = setTimeout(currentTime, 1000);
        }


        currentTime();
    </script>
</body>
</html>
